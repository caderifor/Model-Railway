//   CaderIforRailway Pulse Width Modulation controller  by Michael Beer
//   01/11/23  ALL WORKS   including friction
//   Features controls for a steam locomotive - regulator, gear and brake + train weight
//   Simulates, train weight, friction, inertia, wheelslip,
//   control to account for varying power required to start a loco moving


float regulator = 0;     //  reg * gear overflows int variable
float prevRegulator = 0; //  for triggering jumpstart
float gear = 0;
float speedUp = 0;
int velocity = 0;
int motorValue = 0;      //  output pwm value
int prevMotorValue = 0;  //  for jumpstart
int brake = 0;           //  to calculate
int brakePotNow = 0;     //  read pot
int brakePotPrev = 0;    //  last time around
int brakeRelease = 0;
int train = 0;           //  set weight sim here
int speedDown = 0;
int acceleration = 0;
int FwdRev = 0;          //  reverse relay
int jumpStart = 0;       //  value to jump to
int jump = 0;            //  jump by
int jumpDown = 0;        //  cut power as motor stopped
bool slipping = LOW;     //  High if slipping detected
bool Estop = HIGH;
bool esLatch = LOW;
bool esButton = HIGH;
bool TRIP = HIGH;        //  HIGH means TRIP has occurred
bool Simple = LOW;       //  Read switch
bool Modeinit = LOW;     //  check simple once only
bool Friction = LOW;     //  introduce losses if rolling with regulator closed

void setup() {
  pinMode(2, OUTPUT);   //   LED for Estop
  pinMode(3, INPUT);    //   Estop  button
  pinMode(4, OUTPUT);   //   Simple LED
  pinMode(5, INPUT);    //   SIMPLE switch
  pinMode(6, OUTPUT);   //   Mid Gear LED
  pinMode(7, OUTPUT);   //   REVERSE relay
  pinMode(9, OUTPUT);   //   Train PWM
  pinMode(10, OUTPUT);  //   brake force LED pwm
  pinMode(11, OUTPUT);  //   SLIP LED

  //  A0 = train pot
  //  A1 = jumpStart pot (loco start PWM val )
  //  A2 = Brake pot
  //  A4 = regulator pot
  //  A5 = Gear pot

  // set PWM freq for pin 9
  TCCR1B = TCCR1B & B11111000 | B00000001;    // set timer 1 divisor to     1 for PWM frequency of 31372.55 Hz
  Serial.begin(9600);
}

void loop() {
  if (Modeinit == LOW) {  //   check mode switch at startup only
    Simple = digitalRead(5);
    digitalWrite(4, Simple);          //  simple led
    Modeinit = HIGH;
  }
  //   start of loop from second time onwards
  if (TRIP == HIGH) {
    digitalWrite(2, HIGH);  //  ESTOP RED LED ON (if tripped, is it ok to reset now)
    EstopReset();
  }

  if (Simple == HIGH) {     //  set on startup (above)
    simple();
  }
  else {
    complicated();
  }
  EstopSet();
  delay(train);    //   set loop speed with Train pot
}                  //  end of void loop

void simple() {
  gear = (analogRead(A5));           //  from pots
  if (gear > 512) {
    digitalWrite(7, LOW);            //   Reverse relay off
  }
  else   {
    if (gear < 512) {
      digitalWrite( 7, HIGH);        //   Reverse relay on
    }
    gear = (gear - 512) / 2;         //   255 max
    FwdRev = (512 - gear) / 2;       //  255 max
    if (FwdRev < 20) {
      digitalWrite(6 , HIGH);        //  dead zone  LED
    }
    else {
      digitalWrite(6 , LOW);
    }
  }
  motorValue = (analogRead(A4));     //   0 to 1024
  motorValue = (motorValue / 4.02);  //   max < 255
  if (esLatch == HIGH ) {            //  no probs
    analogWrite(9, motorValue) ;
  }
}        //  END OF SIMPLE

void complicated() {
  digitalWrite(4, LOW);               //   not simple
  pots();
  calculate();
  motorDrive();
}       //  endof Complicated

void pots() {                         //   read values
  prevRegulator = regulator;
  regulator = (analogRead(A4));
  regulator = (regulator / 4.1);      //  0 to 255

  brakePotNow  = (analogRead(A2));
  if ( brakePotNow > brakePotPrev) {  //  pushing up
    brake = brakePotNow;              //  use new value
  }   else  {
    brake = brakePotPrev;             //  stay same - ignore reduction
  }
  brakePotPrev = brake;               //     for next time

  brakePotNow  = (analogRead(A2));    //  look for brake release
  brakePotNow = brakePotNow / 4;
  if (brakePotNow < 30) {             //  knob pulled down to "Release"
    brakePotPrev = brakePotNow;       //  avoid popup ??
    brakeRelease = (30 - brakePotNow);
  }  else  {
    brakeRelease = 0;
  }
  brake = brake - brakeRelease;
  if (brake < 0) {
    brake = 0;
  }
  //  brake thus far, 0 to 1024
  brake = (brake / 4);
  //  0 to 255 approx

  if (Friction == HIGH) {
    brake = brake + 60;   //   60 gives step of 2 per cycle
  }

  //   ADD  FRICTION  ?
  if (( motorValue > 100) && (regulator < 1)) { //  rolling along
    Friction = HIGH;
  }


  if (brake > 60) {
    analogWrite (10 , brake);          //   proportional "brake" LED
  } else {
    analogWrite (10 , 0);
  }
  //  Using TRAIN pot to change loop time
  train = (analogRead(A0));            // weight of train
  train = train/2;
  if (train < 200) {
    train = 200;                        //   light engine
  }
  //    This TRAIN goes into delay(train);    200 - 512
  //     might need reducing - halved

  gear = (analogRead(A5));
  if (gear > 512) {
    digitalWrite(7, LOW);             //   Reverse relay off
    gear = (gear - 512) / 2;          //   255 max
  }
  else   {
    if (gear < 512) {
      digitalWrite( 7, HIGH);         //   Reverse relay on
      gear = (512 - gear) / 2;        //  255 max
    }
  }
  if (gear < 20) {
    digitalWrite(6 , HIGH);           //  dead zone  LED
    gear = 0;                         //  dead zone / mid gear
  }
  else {
    digitalWrite(6 , LOW);
  }
  //   read sluggish pot -  only IF loco is stopped and regulator closed
  if ((motorValue == 0) && (regulator < 1)) {
    jumpStart = analogRead(1);  //   0 to 1024
    //   divide into bands for "jump"
    if (jumpStart < 256) {   //  best starters   Orange
      jump = 2;
    } else {
      if (jumpStart < 512) { //  moderate starters   Yellow
        jump = 35;
      } else {
        if (jumpStart < 768) {  //  reluctant starters   Green
          jump = 55;
        } else {
          if (jumpStart > 768) {  //  realy tardy (8F)   Pink
            jump = 90;
          }
        }
      }
    }
  }   //   end jumpstart read
  jumpDown = jump / 2;
}     //   end pots

void calculate() {
  slip();                            // check for clumsy regulator use
  if (slipping == LOW) {             //  skip if slipping  (HIGH)

    speedUp = regulator * gear;
    speedUp = sqrt(speedUp);
    speedUp = speedUp / 30;         //  could be more than 30 for slower change
  }
  speedDown = brake;
  speedDown = speedDown / 30;       //  could be more than 30 for slower change
  acceleration = speedUp - speedDown;
}  //  ends calculate

void motorDrive() {
  if (esLatch == HIGH ) {             // if no probs

    // JUMP up ?
    if ((motorValue < 1) && (regulator > 5)) {
      //  stationary and regulator opened
      motorValue =  jump;
    }   //  end of jump up
    else {

      motorValue = motorValue + acceleration;

      //   jump down
      if ((regulator < 1) && (motorValue < prevMotorValue)) {
        //    regulator closed and slowing down
        if (motorValue < jumpDown ) {  //   motor prob stoped
          motorValue = 0;               //   cut power
        }
      }   //   end of jump down
    }  //  from else

    //  limit values
    if (motorValue < 0) {
      motorValue = 0;
    }
    if (motorValue > 255) {
      motorValue = 255;          
    }
    analogWrite(9, motorValue) ;   //  output to train
    prevMotorValue = motorValue;
    Serial.print("  motorValue = ");
    Serial.println(motorValue);   

    if ((Friction = HIGH) && (motorValue == 0)) {
      Friction = LOW;
    }
  }
}    //  ends motorDrive()

void EstopSet() {
  esButton = digitalRead(3);        //   button  pressed ?
  if (esButton == LOW) {
    delay(1000);                    //   slow press
    esButton = digitalRead(3);      //   read ES button
    if (esButton == HIGH) {         //   released again
      esLatch = LOW;
      TRIP = HIGH;
      digitalWrite(2, HIGH);        //  ESTOP RED LED ON
      analogWrite(9, 0);            //   kill output
      motorValue = 0;               //   to 0 before things back online
      regulator = 0;
    }
  }
}


void EstopReset() {                 //   FLASH LED
  if (esLatch == LOW) {             //   else  skip TO END
    esButton = digitalRead(3);      //   read ES button
    if (esButton == LOW) {          //   LOOKING FOR pressed
      digitalWrite(2, LOW);         //   ESTOP RED LED OFF
      delay(1000);                  //   slow press
      digitalWrite(2, HIGH);        //   ESTOP RED LED ON
      esButton = digitalRead(3);    //   read ES button
      if (esButton == HIGH) {       //   if RELEASED
        esLatch = HIGH;             //   reset
        TRIP = LOW;
        digitalWrite(2, LOW);       //   ES RED LED OFF
      } else {
        digitalWrite(2, HIGH);      //   ES RED LED ON - ALARM STILL ON
        delay(1000);
      }
    }
  }
}

void slip() {
  //  if   Heavy train,  gear wide & too much regulator
  if ((train > 200)  && (gear > 180) && (regulator > 150)) {
    slipping = HIGH;
    digitalWrite (11, HIGH);         //   WHEEL SLIP LED
    speedUp = 0;                     //   loose momentum
    speedDown = 50;
  }  else  {
    digitalWrite (11, LOW);          //  LED OFF
    slipping = LOW;
  }
}
